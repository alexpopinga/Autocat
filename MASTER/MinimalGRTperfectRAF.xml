<!-- Simple discrete 2D diffusion model -->

<beast version='2.0' namespace='master:master.model:master.outputs:master.steppers'>
    <run spec='Trajectory'
         simulationTime='20'
         nSamples="100"
         verbosity='2'>
        
        <!--stepper spec='GillespieStepper' /-->
        <!--stepper spec='SALStepper' stepSize="0.1" /-->
        <stepper spec='RateEquationStepper' stepSize="0.1" />

        <model spec='Model' id='model'>
        
            <!-- Genes, proteins, gene-protein complexes -->
            <populationType spec='PopulationType' typeName="G" dim="2 2 2" id="G"/>
            <populationType spec='PopulationType' typeName="P" dim="2 2 2" id="P"/>
            <populationType spec='PopulationType' typeName="GP" dim="2 2 2 2" id="GP"/>
            <populationType spec='PopulationType' typeName="GP1" dim="2 2 2 2 2" id="GP1"/>

            <!-- Hamming distance between two vectors -->
            <function spec='Function' id="HD" params="x y" value="sum(abs(x-y))"/>
            
            <!-- The Poisson probability distribution, n outcomes given expectation lambdat -->
            <function spec='Function' id="dpois" params="n lambdat" value="exp(-lambdat)*lambdat^n/n!"/>
            
	    <!-- Translation enzyme lookup: i is nucleotide, a is amino acid, returns optimal protein catalyst sequence -->
            <function spec='Function' id="key" params="i a">
                <![CDATA[
                  i==0 && a==0 ?  {1,1,0}
                : i==1 && a==1 ?  {0,1,1}
                : i==0 && a==1 ?  {1,0,1}
                :                 {0,1,0}
                ]]>
            </function>

            <!-- Replication reaction, i and j are genes, a is amino acid for protein with replicase activity -->
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[0,0,0] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[0,1,0] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[0,0,1] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[1,0,0] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[1,0,1] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[0,1,1] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[1,1,0] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            <reaction spec='Reaction' reactionName="Replication" rate="1">
                	G[1,1,1] + P[0,0,0] ->  2G[0,0,0] + P[0,0,0]
            </reaction>
            
            <!-- Translation reactions -->
            <reaction spec='Reaction' reactionName="Translation0" rate="5.0">
                <rateMultiplier spec='RateMultiplier' value="exp(-HD(key(i1,e1),{a1,a2,a3}))"/>
                G[i1,i2,i3] + P[0,0,0] -> GP[i1,i2,i3,e1] + P[0,0,0]
            </reaction>

            <reaction spec='Reaction' reactionName="Translation1" rate="5.0">
                <rateMultiplier spec='RateMultiplier' value="exp(-HD(key(i2,e2),{a1,a2,a3}))"/>
                GP[i1,i2,i3,e1] + P[0,0,0] -> GP1[i1,i2,i3,e1,e2] + P[0,0,0]
            </reaction>

            <reaction spec='Reaction' reactionName="Translation2" rate="5.0">
                <rateMultiplier spec='RateMultiplier' value="exp(-HD(key(i3,e3),{a1,a2,a3}))"/>
                GP1[i1,i2,i3,e1,e2] + P[0,0,0] -> G[i1,i2,i3] + P[e1,e2,e3] + P[0,0,0]
            </reaction>
            
            <!-- Degradation reactions -->
            <reaction spec='Reaction' reactionName="DeathToG" rate="0.05">
                G[i1,i2,i3] -> 0
            </reaction>

            <reaction spec='Reaction' reactionName="DeathToP" rate="0.05">
                P[0,0,0] -> 0
            </reaction>

        </model>

        <initialState spec='InitState'>
            <populationSize spec='PopulationSize' size='1000'>
                <population spec='Population' type="@G" location="0 0 0"/>
            </populationSize>
            <populationSize spec='PopulationSize' size='1000'>
                <population spec='Population' type="@P" location="0 0 0"/>
            </populationSize>
            <populationSize spec='PopulationSize' size='1000'>
                <population spec='Population' type="@GP" location="0 0 0 0"/>
            </populationSize>
            <populationSize spec='PopulationSize' size='1000'>
                <population spec='Population' type="@GP1" location="0 0 0 0 0"/>
            </populationSize>
        </initialState>
        
        <output spec='JsonOutput' fileName='$(filebase)_output.json'/>
    </run>
</beast>
